

<feed xmlns="http://www.w3.org/2005/Atom">
  <id>http://localhost:4000/</id>
  <title>신윤수</title>
  <subtitle>A minimal, responsive and feature-rich Jekyll theme for technical writing.</subtitle>
  <updated>2024-11-02T17:41:59+09:00</updated>
  <author>
    <name></name>
    <uri>http://localhost:4000/</uri>
  </author>
  <link rel="self" type="application/atom+xml" href="http://localhost:4000/feed.xml"/>
  <link rel="alternate" type="text/html" hreflang="ko-KR"
    href="http://localhost:4000/"/>
  <generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator>
  <rights> © 2024  </rights>
  <icon>/assets/img/favicons/favicon.ico</icon>
  <logo>/assets/img/favicons/favicon-96x96.png</logo>


  
  <entry>
    <title>커넥션을 활용하여 토픽으로 데이터를 재생산하는 방법</title>
    <link href="http://localhost:4000/posts/%EC%BB%A4%EB%84%A5%EC%85%98%EC%9D%84-%ED%99%9C%EC%9A%A9%ED%95%98%EC%97%AC-%ED%86%A0%ED%94%BD%EC%9C%BC%EB%A1%9C-%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%A5%BC-%EC%9E%AC%EC%83%9D%EC%82%B0%ED%95%98%EB%8A%94-%EB%B0%A9%EB%B2%95/" rel="alternate" type="text/html" title="커넥션을 활용하여 토픽으로 데이터를 재생산하는 방법" />
    <published>2024-11-02T00:00:00+09:00</published>
  
    <updated>2024-11-02T00:00:00+09:00</updated>
  
    <id>http://localhost:4000/posts/%EC%BB%A4%EB%84%A5%EC%85%98%EC%9D%84-%ED%99%9C%EC%9A%A9%ED%95%98%EC%97%AC-%ED%86%A0%ED%94%BD%EC%9C%BC%EB%A1%9C-%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%A5%BC-%EC%9E%AC%EC%83%9D%EC%82%B0%ED%95%98%EB%8A%94-%EB%B0%A9%EB%B2%95/</id>
    <content src="http://localhost:4000/posts/%EC%BB%A4%EB%84%A5%EC%85%98%EC%9D%84-%ED%99%9C%EC%9A%A9%ED%95%98%EC%97%AC-%ED%86%A0%ED%94%BD%EC%9C%BC%EB%A1%9C-%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%A5%BC-%EC%9E%AC%EC%83%9D%EC%82%B0%ED%95%98%EB%8A%94-%EB%B0%A9%EB%B2%95/" />
    <author>
      <name></name>
    </author>

  
    
  

  <summary>커넥션을 활용하여 토픽으로 데이터를 재생산하는 방법

기존에 처리된 데이터를 Amazon S3에서 다시 로드하여 Kafka로 재처리하는 방법은 Kafka Connect를 활용하여 데이터를 새로운 Kafka 토픽으로 배치하는 방식입니다. 예를 들어, S3에 저장된 데이터는 JSON 형식으로 보관되었고, 이를 재처리하여 새로운 비즈니스 로직에 활용하고자 할 때 Kafka Connect의 S3 Source Connector를 사용하여 Kafka 토픽에 데이터를 배치할 수 있습니다. 이때, 아래의 순서에 따라 설정합니다.

1. 새로운 Kafka 토픽 생성

새로운 토픽을 만들어 데이터를 수신할 준비를 합니다. kafka-topics.sh 스크립트를 사용하여 토픽을 생성할 수 있습니다:

bin/kafka-t...</summary>

  </entry>

  
  <entry>
    <title>카프카 컴패션옵션에 대한 정리</title>
    <link href="http://localhost:4000/posts/%EC%B9%B4%ED%94%84%EC%B9%B4-%EC%BB%B4%ED%8C%A8%EC%85%98%EC%98%B5%EC%85%98%EC%97%90-%EB%8C%80%ED%95%9C-%EC%A0%95%EB%A6%AC/" rel="alternate" type="text/html" title="카프카 컴패션옵션에 대한 정리" />
    <published>2024-11-02T00:00:00+09:00</published>
  
    <updated>2024-11-02T00:00:00+09:00</updated>
  
    <id>http://localhost:4000/posts/%EC%B9%B4%ED%94%84%EC%B9%B4-%EC%BB%B4%ED%8C%A8%EC%85%98%EC%98%B5%EC%85%98%EC%97%90-%EB%8C%80%ED%95%9C-%EC%A0%95%EB%A6%AC/</id>
    <content src="http://localhost:4000/posts/%EC%B9%B4%ED%94%84%EC%B9%B4-%EC%BB%B4%ED%8C%A8%EC%85%98%EC%98%B5%EC%85%98%EC%97%90-%EB%8C%80%ED%95%9C-%EC%A0%95%EB%A6%AC/" />
    <author>
      <name></name>
    </author>

  
    
  

  <summary>Kafka의 컴팩션(compaction): 데이터 중복 제거와 최신 상태 유지의 비결

Kafka는 대용량의 실시간 데이터 스트림을 처리하는 데 최적화된 메시지 브로커 시스템으로, 다양한 데이터 보관 옵션을 제공하여 데이터 관리의 유연성을 높여줍니다. 그중에서도 컴팩션(compaction)은 특정 상황에서 중복된 데이터를 줄이고, 최신 상태를 유지하기 위해 매우 유용한 기능입니다. 이번 글에서는 Kafka의 컴팩션이란 무엇인지, 어떤 상황에서 활용되는지와 함께 구체적인 예시로 알아보겠습니다.

컴팩션이란?

Kafka의 컴팩션은 Log Compaction이라고도 하며, 다음과 같은 주요 기능을 제공합니다:


  키 기반 중복 제거: Kafka의 메시지는 “키-값” 형태로 저장되며, 컴팩션은 같은 키를...</summary>

  </entry>

  
  <entry>
    <title>카프카 커스텀파티셔닝</title>
    <link href="http://localhost:4000/posts/%EC%B9%B4%ED%94%84%EC%B9%B4-%EC%BB%A4%EC%8A%A4%ED%85%80%ED%8C%8C%ED%8B%B0%EC%85%94%EB%8B%9D/" rel="alternate" type="text/html" title="카프카 커스텀파티셔닝" />
    <published>2024-11-02T00:00:00+09:00</published>
  
    <updated>2024-11-02T00:00:00+09:00</updated>
  
    <id>http://localhost:4000/posts/%EC%B9%B4%ED%94%84%EC%B9%B4-%EC%BB%A4%EC%8A%A4%ED%85%80%ED%8C%8C%ED%8B%B0%EC%85%94%EB%8B%9D/</id>
    <content src="http://localhost:4000/posts/%EC%B9%B4%ED%94%84%EC%B9%B4-%EC%BB%A4%EC%8A%A4%ED%85%80%ED%8C%8C%ED%8B%B0%EC%85%94%EB%8B%9D/" />
    <author>
      <name></name>
    </author>

  
    
  

  <summary>센서 데이터를 처리하고 운영자에게 심각한 중단 상황을 신속하게 알리기 위해, Apache Kafka와 NestJS를 활용하여 시스템을 구축할 수 있습니다. 이 글에서는 알림 수준에 따라 메시지를 특정 파티션에 할당하고, 컨슈머가 Critical 알림을 우선 처리하도록 구현하는 방법을 단계별로 설명하겠습니다.

1. Kafka 토픽 및 파티션 설계

먼저, Kafka에서 알림을 처리하기 위한 alerts 토픽을 생성하고, 알림 수준에 따라 파티션을 분리합니다:


  파티션 0: Critical
  파티션 1: Major
  파티션 2: Minor
  파티션 3: Warning


이러한 구조를 통해 각 알림 수준에 따라 메시지를 분리하여 처리할 수 있습니다.

2. 커스텀 파티셔너 구현
...</summary>

  </entry>

  
  <entry>
    <title>카프카 스타터팩 모듈 구성</title>
    <link href="http://localhost:4000/posts/%EC%B9%B4%ED%94%84%EC%B9%B4-%EC%8A%A4%ED%83%80%ED%84%B0%ED%8C%A9-%EB%AA%A8%EB%93%88-%EA%B5%AC%EC%84%B1/" rel="alternate" type="text/html" title="카프카 스타터팩 모듈 구성" />
    <published>2024-11-02T00:00:00+09:00</published>
  
    <updated>2024-11-02T00:00:00+09:00</updated>
  
    <id>http://localhost:4000/posts/%EC%B9%B4%ED%94%84%EC%B9%B4-%EC%8A%A4%ED%83%80%ED%84%B0%ED%8C%A9-%EB%AA%A8%EB%93%88-%EA%B5%AC%EC%84%B1/</id>
    <content src="http://localhost:4000/posts/%EC%B9%B4%ED%94%84%EC%B9%B4-%EC%8A%A4%ED%83%80%ED%84%B0%ED%8C%A9-%EB%AA%A8%EB%93%88-%EA%B5%AC%EC%84%B1/" />
    <author>
      <name></name>
    </author>

  
    
  

  <summary>NestJS에서 토픽별 Kafka 설정을 위한 인터페이스 기반 구성 가이드

Kafka는 MSA 아키텍처에서 안정적이고 확장 가능한 메시징 솔루션으로 널리 사용됩니다. 여러 서비스가 동일한 Kafka 인프라를 사용할 때 특정 토픽에 대해 맞춤 설정(예: ACK 설정, 그룹 ID, 오프셋 관리 방식 등)이 필요할 수 있습니다. 이 글에서는 NestJS 기반 서버에서 Kafka의 토픽별 설정을 인터페이스 기반으로 구성하여 직관적이고 확장성 있는 코드를 작성하는 방법을 소개합니다.



목표


  프로듀서: 각 토픽에 대한 ACK 설정을 인터페이스로 관리하여 메시지 신뢰성을 높임.
  컨슈머: 수동 커밋을 통해 데이터 신뢰성을 높이고, 토픽별 그룹 ID와 오프셋 관리 방식을 인터페이스로 관리.
  모듈화:...</summary>

  </entry>

  
  <entry>
    <title>카프카 기본이해</title>
    <link href="http://localhost:4000/posts/%EC%B9%B4%ED%94%84%EC%B9%B4-%EA%B8%B0%EB%B3%B8%EC%9D%B4%ED%95%B4/" rel="alternate" type="text/html" title="카프카 기본이해" />
    <published>2024-11-02T00:00:00+09:00</published>
  
    <updated>2024-11-02T00:00:00+09:00</updated>
  
    <id>http://localhost:4000/posts/%EC%B9%B4%ED%94%84%EC%B9%B4-%EA%B8%B0%EB%B3%B8%EC%9D%B4%ED%95%B4/</id>
    <content src="http://localhost:4000/posts/%EC%B9%B4%ED%94%84%EC%B9%B4-%EA%B8%B0%EB%B3%B8%EC%9D%B4%ED%95%B4/" />
    <author>
      <name></name>
    </author>

  
    
  

  <summary>Kafka의 개념을 가장 높은 개념인 클러스터에서부터 가장 낮은 개념인 레코드 필드까지 차례로 설명하고, 메시지 전송 프로세스에 대한 설명을 블로그 글 형식으로 작성해보겠습니다.

Kafka 클러스터
│
├── 브로커 1
│ ├── 토픽 A
│ │ ├── 파티션 1
│ │ │ ├── 리더 (메시지 저장 및 관리)
│ │ │ └── 팔로워 레플리카 (리더 복제)
│ │ └── 파티션 2
│ │ ├── 리더 (메시지 저장 및 관리)
│ │ └── 팔로워 레플리카 (리더 복제)
│ └── 토픽 B
│ ├── 파티션 1
│ │ ├── 리더 (메시지 저장 및 관리)
│ │ └── 팔로워 레플리카 (리더 복제)
│ └── 파티션 2
│ ├── 리더 (메시지 저장 및 관리)
│ └── 팔로워 레플리카 (리더 복제)...</summary>

  </entry>

</feed>


