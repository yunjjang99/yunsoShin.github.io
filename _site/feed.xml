

<feed xmlns="http://www.w3.org/2005/Atom">
  <id>http://localhost:4000/</id>
  <title>신윤수</title>
  <subtitle>A minimal, responsive and feature-rich Jekyll theme for technical writing.</subtitle>
  <updated>2024-08-09T23:21:32+09:00</updated>
  <author>
    <name></name>
    <uri>http://localhost:4000/</uri>
  </author>
  <link rel="self" type="application/atom+xml" href="http://localhost:4000/feed.xml"/>
  <link rel="alternate" type="text/html" hreflang="ko-KR"
    href="http://localhost:4000/"/>
  <generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator>
  <rights> © 2024  </rights>
  <icon>/assets/img/favicons/favicon.ico</icon>
  <logo>/assets/img/favicons/favicon-96x96.png</logo>


  
  <entry>
    <title>Docker Compose란?</title>
    <link href="http://localhost:4000/posts/Docker-compose%EB%9E%80/" rel="alternate" type="text/html" title="Docker Compose란?" />
    <published>2024-08-09T00:00:00+09:00</published>
  
    <updated>2024-08-09T00:00:00+09:00</updated>
  
    <id>http://localhost:4000/posts/Docker-compose%EB%9E%80/</id>
    <content src="http://localhost:4000/posts/Docker-compose%EB%9E%80/" />
    <author>
      <name></name>
    </author>

  
    
  

  <summary>Docker Compose: 개요 및 구현 방법

Docker Compose는 여러 컨테이너를 정의하고 실행하는 데 사용되는 도구입니다. 특히, 여러 서비스가 상호 작용하는 복잡한 애플리케이션의 경우 유용합니다. Docker Compose를 사용하면 여러 컨테이너로 이루어진 애플리케이션을 쉽게 정의하고 배포할 수 있습니다.

이 글에서는 Docker Compose의 기본 개념과 함께 이를 활용하여 애플리케이션을 구축하고 배포하는 방법을 단계별로 설명하겠습니다.



1. Docker Compose란?

Docker Compose는 docker-compose.yml이라는 파일을 사용하여 애플리케이션의 서비스, 네트워크, 볼륨 등을 정의합니다. docker-compose.yml 파일에 정의된 내용을 바탕으...</summary>

  </entry>

  
  <entry>
    <title>Frigate 설치 및 설정 가이드 (도커 사용)</title>
    <link href="http://localhost:4000/posts/%EC%98%A4%ED%94%88%EC%86%8C%EC%8A%A4-NVR-Frigate-%EA%B5%AC%EC%84%B1%ED%95%98%EA%B8%B0/" rel="alternate" type="text/html" title="Frigate 설치 및 설정 가이드 (도커 사용)" />
    <published>2024-08-07T00:00:00+09:00</published>
  
    <updated>2024-08-09T22:19:03+09:00</updated>
  
    <id>http://localhost:4000/posts/%EC%98%A4%ED%94%88%EC%86%8C%EC%8A%A4-NVR-Frigate-%EA%B5%AC%EC%84%B1%ED%95%98%EA%B8%B0/</id>
    <content src="http://localhost:4000/posts/%EC%98%A4%ED%94%88%EC%86%8C%EC%8A%A4-NVR-Frigate-%EA%B5%AC%EC%84%B1%ED%95%98%EA%B8%B0/" />
    <author>
      <name></name>
    </author>

  
    
    <category term="NVR" />
    
    <category term="Home Assistant" />
    
  

  <summary>Frigate는 실시간 객체 감지 기능을 제공하는 NVR(Network Video Recorder) 오픈소스 소프트웨어입니다. 홈 어시스턴트와도 통합이 가능하여, 스마트 홈 시스템에서 비디오 감시를 효율적으로 관리할 수 있게 해줍니다. Frigate는 딥러닝을 활용하여 영상에서 사람, 차량 등의 객체를 실시간으로 감지하며, 이 모든 처리는 로컬에서 수행되어 개인 정보 보호에도 유리합니다.

Frigate 설치 및 설정 방법 (도커 사용)

사전 준비물


  Docker가 설치된 시스템
  Docker Compose (선택사항, Docker Compose를 사용하는 경우)
  한 개 이상의 IP 카메라 또는 네트워크에 연결된 카메라


일단 첫번째로 도커를 다운로드 받습니다

도커 공식홈페이지

 do...</summary>

  </entry>

  
  <entry>
    <title>리액트의 useState훅을 깊이 있게 이해하기</title>
    <link href="http://localhost:4000/posts/%EB%A6%AC%EC%95%A1%ED%8A%B8%EC%9D%98-useState%ED%9B%85%EC%9D%84-%EA%B9%8A%EC%9D%B4-%EC%9E%88%EA%B2%8C-%EC%9D%B4%ED%95%B4%ED%95%98%EA%B8%B0/" rel="alternate" type="text/html" title="리액트의 useState훅을 깊이 있게 이해하기" />
    <published>2024-06-19T00:00:00+09:00</published>
  
    <updated>2024-06-28T21:57:45+09:00</updated>
  
    <id>http://localhost:4000/posts/%EB%A6%AC%EC%95%A1%ED%8A%B8%EC%9D%98-useState%ED%9B%85%EC%9D%84-%EA%B9%8A%EC%9D%B4-%EC%9E%88%EA%B2%8C-%EC%9D%B4%ED%95%B4%ED%95%98%EA%B8%B0/</id>
    <content src="http://localhost:4000/posts/%EB%A6%AC%EC%95%A1%ED%8A%B8%EC%9D%98-useState%ED%9B%85%EC%9D%84-%EA%B9%8A%EC%9D%B4-%EC%9E%88%EA%B2%8C-%EC%9D%B4%ED%95%B4%ED%95%98%EA%B8%B0/" />
    <author>
      <name></name>
    </author>

  
    
    <category term="\[React," />
    
    <category term="JavaScript," />
    
    <category term="Web" />
    
    <category term="Development\]" />
    
  

  <summary>리액트의 상태관리훅의 기본이 되는  useState훅을 깊이 있게 이해하는것이 이번 포스팅의 목적입니다.

useState 기본 예시

리액트 컴포넌트에서 useState 훅을 사용하는 기본적인 예시는 다음과 같습니다.

import React, { useState } from &amp;quot;react&amp;quot;;

function Counter() {
  // count라는 상태 변수와 이를 갱신할 setCount 함수를 선언합니다.
  const [count, setCount] = useState(0);

  return (
    &amp;amp;lt;div&amp;amp;gt;
      &amp;amp;lt;p&amp;amp;gt;You clicked {count} times&amp;amp;lt;/p&amp;amp;gt;
      &amp;amp;lt;button onClick={() =&amp;amp;gt; setCount...</summary>

  </entry>

  
  <entry>
    <title>NestJS와 Angular: 철학과 설계의 유사성</title>
    <link href="http://localhost:4000/posts/NestJS%EC%99%80-Angular-%EC%B2%A0%ED%95%99%EA%B3%BC-%EC%84%A4%EA%B3%84%EC%9D%98-%EC%9C%A0%EC%82%AC%EC%84%B1/" rel="alternate" type="text/html" title="NestJS와 Angular: 철학과 설계의 유사성" />
    <published>2024-06-18T00:00:00+09:00</published>
  
    <updated>2024-06-18T00:00:00+09:00</updated>
  
    <id>http://localhost:4000/posts/NestJS%EC%99%80-Angular-%EC%B2%A0%ED%95%99%EA%B3%BC-%EC%84%A4%EA%B3%84%EC%9D%98-%EC%9C%A0%EC%82%AC%EC%84%B1/</id>
    <content src="http://localhost:4000/posts/NestJS%EC%99%80-Angular-%EC%B2%A0%ED%95%99%EA%B3%BC-%EC%84%A4%EA%B3%84%EC%9D%98-%EC%9C%A0%EC%82%AC%EC%84%B1/" />
    <author>
      <name></name>
    </author>

  
    
    <category term="NestJS" />
    
    <category term="Angular" />
    
  

  <summary>NestJS는 Node.js를 위한 진보된 웹 프레임워크로, Angular의 철학과 디자인 패턴에 깊은 영향을 받아 개발되었습니다. 이는 두 프레임워크가 구조화된 모듈 시스템, 의존성 주입, 데코레이터 사용 등에서 많은 유사성을 가지게 합니다. 아래에서는 NestJS와 Angular의 주요 개념을 비교하면서, 코드 예제를 통해 구체적으로 설명해 보겠습니다.

목차


  모듈 시스템
  의존성 주입 (Dependency Injection)
  데코레이터 사용
  파이프 (Pipes)
  가드 (Guards)
  인터셉터 (Interceptors)
  미들웨어 (Middleware)
  라우팅 (Routing)
  테스트 (Testing)
  커스텀 데코레이터 (Custom Decorators)
  라이...</summary>

  </entry>

  
  <entry>
    <title>일렉트론(Electron) 앱의 CI/CD 배포 및 원격 업데이트 기능 추가 방법</title>
    <link href="http://localhost:4000/posts/%EC%9D%BC%EB%A0%89%ED%8A%B8%EB%A1%A0-CICD-%EC%9B%90%EA%B2%A9%EB%B2%84%EC%A0%84%EC%97%85%EB%8D%B0%EC%9D%B4%ED%8A%B8/" rel="alternate" type="text/html" title="일렉트론(Electron) 앱의 CI/CD 배포 및 원격 업데이트 기능 추가 방법" />
    <published>2024-06-04T00:00:00+09:00</published>
  
    <updated>2024-06-18T20:55:49+09:00</updated>
  
    <id>http://localhost:4000/posts/%EC%9D%BC%EB%A0%89%ED%8A%B8%EB%A1%A0-CICD-%EC%9B%90%EA%B2%A9%EB%B2%84%EC%A0%84%EC%97%85%EB%8D%B0%EC%9D%B4%ED%8A%B8/</id>
    <content src="http://localhost:4000/posts/%EC%9D%BC%EB%A0%89%ED%8A%B8%EB%A1%A0-CICD-%EC%9B%90%EA%B2%A9%EB%B2%84%EC%A0%84%EC%97%85%EB%8D%B0%EC%9D%B4%ED%8A%B8/" />
    <author>
      <name></name>
    </author>

  
    
    <category term="Electron" />
    
    <category term="CI/CD" />
    
    <category term="Deployment" />
    
  

  <summary>일렉트론(Electron) 앱의 CI/CD 배포 및 원격 업데이트 기능을 추가하려면 다음과 같은 단계로 진행할 수 있습니다.

1. CI/CD 환경 구축

CI/CD 도구 선택


  GitHub Actions, GitLab CI/CD, Jenkins 등 원하는 도구를 선택합니다.


Electron 빌드 및 패키징


  electron-builder를 사용하면 다양한 플랫폼(Windows, macOS, Linux)용으로 손쉽게 빌드하고 패키징할 수 있습니다.
  electron-builder 설정 파일인 package.json에 빌드 설정을 추가합니다.


{
  &amp;quot;name&amp;quot;: &amp;quot;your-app&amp;quot;,
  &amp;quot;version&amp;quot;: &amp;quot;1.0.0&amp;quot;,
  &amp;quot;main&amp;quot;: &amp;quot;main.js&amp;quot;,
  &amp;quot;scripts&amp;quot;: ...</summary>

  </entry>

</feed>


