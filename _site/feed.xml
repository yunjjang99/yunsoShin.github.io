

<feed xmlns="http://www.w3.org/2005/Atom">
  <id>http://localhost:4000/</id>
  <title>신윤수</title>
  <subtitle>A minimal, responsive and feature-rich Jekyll theme for technical writing.</subtitle>
  <updated>2024-06-18T20:55:01+09:00</updated>
  <author>
    <name></name>
    <uri>http://localhost:4000/</uri>
  </author>
  <link rel="self" type="application/atom+xml" href="http://localhost:4000/feed.xml"/>
  <link rel="alternate" type="text/html" hreflang="ko-KR"
    href="http://localhost:4000/"/>
  <generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator>
  <rights> © 2024  </rights>
  <icon>/assets/img/favicons/favicon.ico</icon>
  <logo>/assets/img/favicons/favicon-96x96.png</logo>


  
  <entry>
    <title>NestJS와 Angular: 철학과 설계의 유사성</title>
    <link href="http://localhost:4000/posts/NestJS%EC%99%80-Angular-%EC%B2%A0%ED%95%99%EA%B3%BC-%EC%84%A4%EA%B3%84%EC%9D%98-%EC%9C%A0%EC%82%AC%EC%84%B1/" rel="alternate" type="text/html" title="NestJS와 Angular: 철학과 설계의 유사성" />
    <published>2024-06-18T00:00:00+09:00</published>
  
    <updated>2024-06-18T00:00:00+09:00</updated>
  
    <id>http://localhost:4000/posts/NestJS%EC%99%80-Angular-%EC%B2%A0%ED%95%99%EA%B3%BC-%EC%84%A4%EA%B3%84%EC%9D%98-%EC%9C%A0%EC%82%AC%EC%84%B1/</id>
    <content src="http://localhost:4000/posts/NestJS%EC%99%80-Angular-%EC%B2%A0%ED%95%99%EA%B3%BC-%EC%84%A4%EA%B3%84%EC%9D%98-%EC%9C%A0%EC%82%AC%EC%84%B1/" />
    <author>
      <name></name>
    </author>

  
    
    <category term="NestJS" />
    
    <category term="Angular" />
    
  

  <summary>NestJS는 Node.js를 위한 진보된 웹 프레임워크로, Angular의 철학과 디자인 패턴에 깊은 영향을 받아 개발되었습니다. 이는 두 프레임워크가 구조화된 모듈 시스템, 의존성 주입, 데코레이터 사용 등에서 많은 유사성을 가지게 합니다. 아래에서는 NestJS와 Angular의 주요 개념을 비교하면서, 코드 예제를 통해 구체적으로 설명해 보겠습니다.

목차


  모듈 시스템
  의존성 주입 (Dependency Injection)
  데코레이터 사용
  파이프 (Pipes)
  가드 (Guards)
  인터셉터 (Interceptors)
  미들웨어 (Middleware)
  라우팅 (Routing)
  테스트 (Testing)
  커스텀 데코레이터 (Custom Decorators)
  라이...</summary>

  </entry>

  
  <entry>
    <title>일렉트론(Electron) 앱의 CI/CD 배포 및 원격 업데이트 기능 추가 방법</title>
    <link href="http://localhost:4000/posts/%EC%9D%BC%EB%A0%89%ED%8A%B8%EB%A1%A0-CICD-%EC%9B%90%EA%B2%A9%EB%B2%84%EC%A0%84%EC%97%85%EB%8D%B0%EC%9D%B4%ED%8A%B8/" rel="alternate" type="text/html" title="일렉트론(Electron) 앱의 CI/CD 배포 및 원격 업데이트 기능 추가 방법" />
    <published>2024-06-04T00:00:00+09:00</published>
  
    <updated>2024-06-04T00:00:00+09:00</updated>
  
    <id>http://localhost:4000/posts/%EC%9D%BC%EB%A0%89%ED%8A%B8%EB%A1%A0-CICD-%EC%9B%90%EA%B2%A9%EB%B2%84%EC%A0%84%EC%97%85%EB%8D%B0%EC%9D%B4%ED%8A%B8/</id>
    <content src="http://localhost:4000/posts/%EC%9D%BC%EB%A0%89%ED%8A%B8%EB%A1%A0-CICD-%EC%9B%90%EA%B2%A9%EB%B2%84%EC%A0%84%EC%97%85%EB%8D%B0%EC%9D%B4%ED%8A%B8/" />
    <author>
      <name></name>
    </author>

  
    
    <category term="Electron" />
    
    <category term="CI/CD" />
    
    <category term="Deployment" />
    
  

  <summary>일렉트론(Electron) 앱의 CI/CD 배포 및 원격 업데이트 기능을 추가하려면 다음과 같은 단계로 진행할 수 있습니다.

1. CI/CD 환경 구축

CI/CD 도구 선택


  GitHub Actions, GitLab CI/CD, Jenkins 등 원하는 도구를 선택합니다.


Electron 빌드 및 패키징


  electron-builder를 사용하면 다양한 플랫폼(Windows, macOS, Linux)용으로 손쉽게 빌드하고 패키징할 수 있습니다.
  electron-builder 설정 파일인 package.json에 빌드 설정을 추가합니다.


{
  &amp;quot;name&amp;quot;: &amp;quot;your-app&amp;quot;,
  &amp;quot;version&amp;quot;: &amp;quot;1.0.0&amp;quot;,
  &amp;quot;main&amp;quot;: &amp;quot;main.js&amp;quot;,
  &amp;quot;scripts&amp;quot;: ...</summary>

  </entry>

  
  <entry>
    <title>Jest로 테스트코드 작성하기: 상세 가이드와 예제 코드</title>
    <link href="http://localhost:4000/posts/JEST%EB%A1%9C-%ED%85%8C%EC%8A%A4%ED%8A%B8%EC%BD%94%EB%93%9C-%EC%9E%91%EC%84%B1%ED%95%98%EA%B8%B0-%EC%83%81%EC%84%B8-%EA%B0%80%EC%9D%B4%EB%93%9C%EC%99%80-%EC%98%88%EC%A0%9C-%EC%BD%94%EB%93%9C/" rel="alternate" type="text/html" title="Jest로 테스트코드 작성하기: 상세 가이드와 예제 코드" />
    <published>2024-06-03T00:00:00+09:00</published>
  
    <updated>2024-06-03T00:00:00+09:00</updated>
  
    <id>http://localhost:4000/posts/JEST%EB%A1%9C-%ED%85%8C%EC%8A%A4%ED%8A%B8%EC%BD%94%EB%93%9C-%EC%9E%91%EC%84%B1%ED%95%98%EA%B8%B0-%EC%83%81%EC%84%B8-%EA%B0%80%EC%9D%B4%EB%93%9C%EC%99%80-%EC%98%88%EC%A0%9C-%EC%BD%94%EB%93%9C/</id>
    <content src="http://localhost:4000/posts/JEST%EB%A1%9C-%ED%85%8C%EC%8A%A4%ED%8A%B8%EC%BD%94%EB%93%9C-%EC%9E%91%EC%84%B1%ED%95%98%EA%B8%B0-%EC%83%81%EC%84%B8-%EA%B0%80%EC%9D%B4%EB%93%9C%EC%99%80-%EC%98%88%EC%A0%9C-%EC%BD%94%EB%93%9C/" />
    <author>
      <name></name>
    </author>

  
    
  

  <summary>layout: post
title: “JEST로 테스트코드 작성하기: 상세 가이드와 예제 코드”
date: 2024-06-03
categories: [JavaScript, Testing]
tags: [Jest, TDD]



JavaScript 프로젝트에서 테스트를 작성하는 것은 코드의 품질을 유지하고, 예상치 못한 버그를 방지하는 데 중요한 역할을 합니다. Jest는 Facebook에서 개발한 JavaScript 테스팅 프레임워크로, 설정이 간단하고 다양한 기능을 제공하여 많은 개발자들이 애용하고 있습니다. 이번 블로그 글에서는 Jest를 사용하여 테스트 코드를 작성하는 방법을 자세히 설명하고, 풍부한 예제 코드로 그 과정을 보여드리겠습니다.

1. Jest 설치하기

먼저, Jest를 프로젝트에 설...</summary>

  </entry>

  
  <entry>
    <title>리액트의 Reconciliation 과정 설명</title>
    <link href="http://localhost:4000/posts/react-%EA%B0%80%EC%83%81%EB%8F%94%EC%9D%98-%EB%8F%99%EC%9E%91%EC%9B%90%EB%A6%AC/" rel="alternate" type="text/html" title="리액트의 Reconciliation 과정 설명" />
    <published>2024-06-01T00:00:00+09:00</published>
  
    <updated>2024-06-01T00:00:00+09:00</updated>
  
    <id>http://localhost:4000/posts/react-%EA%B0%80%EC%83%81%EB%8F%94%EC%9D%98-%EB%8F%99%EC%9E%91%EC%9B%90%EB%A6%AC/</id>
    <content src="http://localhost:4000/posts/react-%EA%B0%80%EC%83%81%EB%8F%94%EC%9D%98-%EB%8F%99%EC%9E%91%EC%9B%90%EB%A6%AC/" />
    <author>
      <name></name>
    </author>

  
    
    <category term="React" />
    
    <category term="Frontend" />
    
  

  <summary>리액트의 Reconciliation 과정에서는 변경된 부분만 실제 DOM에 반영됩니다. 주어진 코드에서 상태(state)가 변경되면 리액트는 Reconciliation 과정을 통해 변경된 부분만을 찾아서 업데이트합니다. 이를 Raw한 단계로 설명해보겠습니다.

코드 예제: ParentComponent와 ChildComponent

function ParentComponent() {
  const [data, setData] = useState(&amp;quot;Initial data&amp;quot;);

  const updateData = (newData) =&amp;amp;gt; {
    setData(newData);
  };

  return (
    &amp;amp;lt;div&amp;amp;gt;
      &amp;amp;lt;ChildComponent data={data...</summary>

  </entry>

  
  <entry>
    <title>Next.js와 React Server Components (RSC) 이해하기</title>
    <link href="http://localhost:4000/posts/Next.js%EC%99%80-React-Server-Components-(RSC)-%EC%9D%B4%ED%95%B4%ED%95%98%EA%B8%B0/" rel="alternate" type="text/html" title="Next.js와 React Server Components (RSC) 이해하기" />
    <published>2024-05-21T00:00:00+09:00</published>
  
    <updated>2024-05-23T01:25:14+09:00</updated>
  
    <id>http://localhost:4000/posts/Next.js%EC%99%80-React-Server-Components-(RSC)-%EC%9D%B4%ED%95%B4%ED%95%98%EA%B8%B0/</id>
    <content src="http://localhost:4000/posts/Next.js%EC%99%80-React-Server-Components-(RSC)-%EC%9D%B4%ED%95%B4%ED%95%98%EA%B8%B0/" />
    <author>
      <name></name>
    </author>

  
    
    <category term="Next.js" />
    
    <category term="React" />
    
  

  <summary>개요

Next.js는 React 기반의 프레임워크로, 서버 측 렌더링(SSR), 정적 사이트 생성(SSG) 등의 기능을 통해 React 애플리케이션의 성능을 최적화합니다. Next.js는 React Server Components 개념을 도입하여 서버 컴포넌트와 클라이언트 컴포넌트를 구별합니다. 이러한 기술적 발전과 구분 방법을 다음과 같이 설명하고, 이를 최적화하여 활용하는 방법을 소개합니다.

기술적인 발전 과정

Next.js의 서버 컴포넌트와 클라이언트 컴포넌트 구분은 React의 발전과 밀접한 관련이 있습니다. 초기에는 SSR(Server-Side Rendering)과 CSR(Client-Side Rendering)을 사용했으며, 이후 정적 사이트 생성(SSG), Incremental Sta...</summary>

  </entry>

</feed>


